package t5;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;

import com.sun.net.httpserver.HttpServer;

import util.Utils;

import com.sun.net.httpserver.HttpExchange;



public class GUIServer {
	private HttpServer server;
	private String configPath;
	private HashMap<String, String> responses;
	
	public GUIServer() { this(8080);}
	
	public GUIServer(int port) { 
		this.configPath = "src/main/resources/config.json";
		this.responses = new HashMap<String, String>();
		
		loadResponses();
		
		try {
			server = HttpServer.create(new InetSocketAddress(port), 0);
			
			server.createContext("/", httpExchange -> requestHandler(httpExchange));
			
			server.start();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public GUIServer(int port, String configPath) {
		this(port);
		this.configPath = configPath;
	}
	
	private void loadResponses() {
		responses.clear();
		JSONObject config = Utils.loadJSON(configPath);
		if(config == null) {
			//Setup in case of no config
			responses.put("/", "<h1>GUI Server v0.6</h1><p>Project by Luca P. and Theo L.</p><p style=\"color:#fff; background:#f00; padding:10px; border-radius:10px;\"> No config was found</p>");
			responses.put("default", "<h3>404 ERROR</h3><p>Project by Luca P. and Theo L.</p><p style=\"color:#fff; background:#f00; padding:10px; border-radius:10px;\"> No config was found</p>");
		}
		else {
			config.keys().forEachRemaining((path) -> {
				//Put each path as key in to responses and the file (loaded with this path) as value
				responses.put(path, Utils.readFile(configPath + path, StandardCharsets.UTF_16));
			});
		}
		
		
	}
	
	private void requestHandler(HttpExchange httpExchange) throws IOException {
		//debug
		loadResponses();
		
		String requestURI = httpExchange.getRequestURI().toASCIIString();
		
		String response = responses.get(requestURI);
		if (response == null) {
			response = responses.get("default");
			if (response == null) {
				System.err.println("No Default Page found");
			}
		}
		
		//String response = "test";
		System.out.println("::"+(response == null));
		
		System.out.println(requestURI);
		
		//System.out.println(Utils.inputStreamToString(httpExchange.getRequestBody()));
		
	    httpExchange.getResponseHeaders().add("Content-Type", "text/html; charset=UTF-8");
	    httpExchange.sendResponseHeaders(200, response.length());

	    OutputStream out = httpExchange.getResponseBody();
	    out.write(response.getBytes("UTF-8"));
	    out.close();
	}
}
